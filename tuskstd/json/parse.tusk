;include:
;s tuskstd/util/search.tusk
;s tuskstd/util/is_whitespace.tusk
;s tuskstd/util/slices.tusk

var json = proto {
    static var parse = fn(string -> str) {
        tokens := json::tokenizer:(str)
        return json::conv:(tokens)
    }

    static var tokenizer = fn(string -> json) {
        tokens := []

        i := 0
        while (i < len:(json)) {

            ;easy to do ones
            if (
                json::(i) == '{' ||
                json::(i) == '}' || 
                json::(i) == '[' || 
                json::(i) == ']' ||
                json::(i) == ':' ||
                json::(i) == ','   ) tokens = pushback:(tokens, json::(i))
            ;;;;;;;;;;;;;;;;
            else {

                if (json::(i) == '\"') {
                    ;its a string

                    fin := ""
                    qtype := json::(i)
                    is_escaped := false

                    i++

                    while (i < len:(json)) {

                        if (json::(i) == '\n') panic:("Invalid JSON data") ;strings cannot have newlines in them, unless its "\n"

                        if (is_escaped) {

                            var special_escaped = [:
                                "b" = '\b',
                                "f" = '\f',
                                "n" = '\n',
                                "r" = '\r',
                                "t" = '\t',
                            :]

                            special := special_escaped::(string -> (json::(i)))
                            if (special) ;if it exists
                                fin+=special
                            else ;just a normal char
                                fin+=json::(i)

                            is_escaped = false

                            continue
                        }

                        if (json::(i) == '\\') {
                            is_escaped = true
                            continue
                        }

                        if (json::(i) == qtype) break
                        fin+=json::(i)
                        i++
                    }

                    tokens = pushback:(tokens, fin)

                } elif (is_digit:(json::(i)) json::(i) == '+' || json::(i) == '-') {
                    ;its a number

					cur := ""

                    while (is_digit:(json::(i)) || json::(i) == 'e' || json::(i) == '+' || json::(i) == '-') {
                        cur+=json::(i)
						i++
					}

					;convert (if its a scientific number) to a regular number
					n := ""
					scientific := "0"

					if (searchfor:(cur, "e") != -1) {
						splitted := split:(cur, "e")
						n = splitted::0
						scientific = splitted::1
					} else n = cur

					numeric := (float -> n) * (float -> (10 ** (int -> scientific)))
					tokens = pushback:(tokens, numeric)
                } elif (starts_with:(json, "true")) {
                    ;its a boolean (true)
                    i+=len:("true")
                    tokens = pushback:(tokens, true)
                } elif (starts_with:(json, "false")) {
                    ;its a boolean (false)
                    i+=len:("false")
                    tokens = pushback:(tokens, false)
                } elif (starts_with:(json, "undefined")) {
                    ;undefined
                    i+=len:("undefined")
                    tokens = pushback:(tokens, undef)
                } elif (is_whitespace:(json::(i))) {
                    i++
                    continue
                } else panic:("Invalid JSON data", errnos::INVALIDLIT)
            }

            i++
        }

        return tokens
    }

	static var getval = fn(array -> tokens, int -> i) {
		cbCnt := 0 ;curly brace count
		bCnt := 0 ;regular brace count

		val_tokens := [] ;tokens of the object/array/value

		while (i < len:(tokens)) {

			if (typeof:(tokens::(i)) == "rune") {
				if (tokens::(i) == '{') cbCnt++
				if (tokens::(i) == '}') cbCnt--
				if (tokens::(i) == '[') bCnt++
				if (tokens::(i) == ']') bCnt--
			}

			val_tokens = pushback:(val_tokens, tokens::(i))

			i++
			if (cbCnt == 0 && bCnt == 0) {
                ;if it became 0 at the end of the iter, stop the loop

                ;if the next item is not a closing brace/bracket or a comma, its an error
                ;e.g.
                ;{
                ;   "test": "test"
                ;   "abc": "def"
                ;}
                if (typeof:(tokens::(i)) == "rune" && tokens::(i) != ',' && tokens::(i) != ']' && tokens::(i) != '}') panic:("Invalid JSON data")

                ;if the second next item is a closing brace/bracket, but the next item is a comma, its also an error
                ;e.g.
                ;{
                ;   "test": "test",
                ;}
                if (typeof:(tokens::(i)) == "rune" && typeof:(tokens::(i + 1)) == "rune" && (tokens::(i) == ',' && (tokens::(i + 1) == ']') || tokens::(i + 1) == '}')) panic:("Invalid JSON data")

                break
            }
		}

		return val_tokens
	}

	static var conv = fn(array -> tokens) {
		if (len:(tokens) == 0) panic:("Invalid JSON data", errnos::INVALIDLIT)

		if (typeof:(tokens::0) == "rune" && tokens::0 == '{') {
			fin := [::]

			i := 1
			while (i < len:(tokens) - 1) {
				if (typeof:(tokens::(i)) != "string") panic:("Invalid JSON data", errnos::INVALIDLIT)
				curkey := clone:(tokens::(i))

				i++
				if (tokens::(i) != ':') panic:("Invalid JSON data", errnos::INVALIDLIT)
				i++

				curval := json::getval:(tokens, i)

				fin::(curkey) = json::conv:(curval)
				i++
			}

			return fin
		} elif (typeof:(tokens::0) == "rune" && tokens::0 == '[') {
			fin := []

			i := 1
			while (i < len:(tokens) - 1) {
				curval := json::getval:(tokens, i)
				fin = pushback:(fin, json::conv:(curval))
				i++
			}

			return fin
		} else return tokens::0
	}
}