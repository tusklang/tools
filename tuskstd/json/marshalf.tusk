;include:
;s tuskstd/util
;r marshal.tusk

var json = proto {
    static var getmarshalv = fn(string -> marshalled, string -> indent) {
        if (ends_with:(marshalled, "]")) marshalled = rmend:(marshalled, 1) + indent + "]"
        if (ends_with:(marshalled, "}")) marshalled = rmend:(marshalled, 1) + indent + "}"
    }

    static ovld marshal = fn(hash -> h, string -> indent) {
        var final = "{\n" + indent

        each (h, k, v) {
            marshalled := json::marshal:(v, indent + indent)
            json::getmarshalv:(marshalled, indent)
            final+="\"" + k + "\": " + marshalled + ",\n" + indent
        }

        rm := 2 + len(indent)
        final = rmend:(final, rm) + "\n" ;remove the trailing ",\n{indent}" and add a newline

        hasp := final::0 == '{'
        if (!hasp)
            final = "{" + rmend:(final, 1)
        return final + "}"
    }

    static ovld marshal = fn(array -> a, string -> indent) {
        var final = "[\n" + indent

        each (a, _, v) {
            marshalled := json::marshal:(v, indent + indent)
            json::getmarshalv:(marshalled, indent)
            final+=marshalled + ",\n" + indent
        }

        rm := 2 + len:(indent)
        final = rmend:(final, rm) + "\n" ;remove the trailing ",\n{indent}" and add a newline

        hasp := final::0 == '['
        if (!hasp) final = "[" + rmend:(final, 1)

        return final + "]"
    }

    static ovld marshal = fn(string -> s, string -> _) {
        return json::marshal:(s)
    }

    static ovld marshal = fn(int -> n, string -> _) {
        return json::marshal:(n)
    }

    static ovld marshal = fn(bool -> b, string -> _) {
        return json::marshal:(b)
    }

    static ovld marshal = fn(none -> u, string -> _) {
        return json::marshal:(u)
    }
}