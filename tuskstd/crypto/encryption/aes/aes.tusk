;include:
;s tuskstd/util/split.tusk
;s tuskstd/util/alloc.tusk
;r .

var aes = proto {
    static var new = fn(string -> key) {
        var a = make:(aes)
        return a
    }

    static var _chunk_to_matrix = fn(string -> chunk) {

        ;initialize the matrix
        var matrix = alloc:(4)
        each (matrix, k, _)
            matrix::(k) = alloc:(4)
        ;;;;;;;;;;;;;;;;;;;;;;

        each (chunk, k, v)
            matrix::(k % 4)::(k / 4) = int -> v

        return matrix
    }

    static var _plaintext_to_matrices = fn(string -> plaintext) {
        chunks := split:(plaintext, 16) ;split in order to form 4x4 matrices (each composing of 16 characters)

        while (len:(chunks::(len:(chunks) - 1)) != 16) chunks::(len:(chunks) - 1)+="z" ;add padding z's if the don't have enough length

        matrices := alloc:(len:(chunks))

        each (chunks, k, v)
            matrices::(k) = aes::_chunk_to_matrix:(v)
        return matrices       
    }

    static var _matrix_to_plaintext = fn(array -> m) {
        
    }

    var encrypt = fn(string -> plaintext) {

        bytes := array -> plaintext ;get the bytes of the plaintext

        matrices := aes::_plaintext_to_matrices:(plaintext)

        each (matrices, _, v) {
            aes::_sub_bytes:(v)
            aes::_shift_rows:(v)
            v = aes::_mix_columns:(v)

            log:(v)
        }

        
    }
}