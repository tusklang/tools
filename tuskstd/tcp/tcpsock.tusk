;include:
;s tuskstd/util/alloc.tusk

var tcp = proto {
    ;tcp socket class

    var _fd

    static var new = fn() {
        var socket = make:(tcp)
        socket::_fd = syscall:(25, 2, 1, "tcp")
        return socket
    }

    var connect = fn(string -> host, int -> port) {
        if (syscall:(26, _fd, 2, host, port) == -1) ;connect to the socket
            panic:("Cannot connect to host " + host + " at port " + (string -> port), errnos::SOCKCANNOTCONNECT)
    }

    var write = fn(string -> data) {
        if (syscall:(1, _fd, data, len:(data)) == -1) ;write to the socket
            panic:("Error writing request to socket", errnos::SOCKCANNOTWRITE)
    }

    var read = fn(int -> amt) {
        var buf = allocstr:(amt)
        r := syscall:(0, _fd, buf, amt) ;read()
        return [buf, r]
    }

    var slurp = fn() {
        fin := ""
        var buf

        while ({
            tmp := read:(1)
            buf = tmp::0
            return tmp::1 > 0
        }) fin+=buf

        return fin
    }

    var ondata = fn(function -> ondata) {
        d := syscall:(19, _fd + 1, 1, [_fd], 0, [], 0, [], -1, -1) ;select()

        if (d == -1) {
            panic:("Error while waiting for socket", errnos::FDWAITERR)
        } else if (d != 0) {
            ondata:(slurp:()) ;slurp the data, and pass it into the ondata cb
        } else panic:("Data not recieved", errnos::DATANOTRECV)
    }
}