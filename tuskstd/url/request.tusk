;include:
;s tuskstd/util
;s tuskstd/tcp
;r parse.tusk

var request = proto {

    static var bufsize = 1

    static var get = fn(uri) {
        parsed := url::parse:(uri)

        sock := tcp::new:()
        sock::connect:(parsed::host, parsed::port)
        sock::write:("GET " + parsed::path + request::_fmt_query:(parsed::query) + " " + 
            toupper:(parsed::protocol) + "/1.1" + 
            "\r\nHost: " + parsed::host + 
            "\r\nConnection: close" + 
            "\r\n\r\n")
        return sock::slurp:()
    }

    static var post = fn(uri, hash -> data) {
        parsed := url::parse:(uri)

        sock := tcp::new:()
        sock::connect:(parsed::host, parsed::port)
        fmt_data := rmbegin:(request::_fmt_query:(data), 1)
        sock::write:("POST " + parsed::path + " " +
            toupper:(parsed::protocol) + "/1.1" +
            "\r\nHost: " + parsed::host +
            "\r\nContent-Type: application/x-www-form-urlencoded" +
            "\r\nContent-Length: " + (string -> len:(fmt_data)) + 
            "\r\n" +
            "\r\n" + fmt_data)
        return sock::slurp:()
    }

    static var _fmt_query = fn(data) {
        ;convert a hashmap query into a ?a=b&c=d
        query_str := "?"

        i := 0 ;if i is the last query (in above example, c=d) then do not put an & after it
        each (data, k, v) {
            query_str+=k + "=" + v

            i++
            if (i != len:(data)) query_str+="&"
        }

        return query_str
    }
}