;include:
;s tuskstd/util

var url = proto {

    var orig
    var protocol
    var host
    var port = 80
    var path = "/"
    var query = [::]

    static var parse = fn(string -> _uri) {

        uri := clone:(_uri)

        ;parse the protocol
        if (searchfor:(uri, "://") == -1) return undef
        protocol := split:(uri, "://")::0
        uri = rmbegin:(uri, len:(protocol + "://"))
        ;;;;;;;;;;;;;;;;;;;

        ;parse the host
        var host = ""
        hostdel := ':' ;either : (if there is a port) or / (if theres no port)
        if (searchfor:(uri, ":") == -1) {
            if (searchfor:(uri, "/") == -1) host = clone:(uri) ;if theres no : or / (abc.com vs abc.com/ or abc.com:80)
            else hostdel = '/' ;port is not specified, but path is (abc.com/abc)
        }

        if (host == "") ;only if host was not set yet
            host = split:(uri, string -> hostdel)::0
        uri = rmbegin:(uri, len:(host))
        ;;;;;;;;;;;;;;;

        var port = 80
        if (len:(uri) != 0 && uri::0 == ':') {
            ;remove the leading ':'
            uri = rmbegin:(uri, 1)

            var portstr

            ;if there is a specified path, cut it off
            if (searchfor:(uri, "/") != -1) portstr = split:(uri, "/")::0
            else portstr = clone:(uri)

            uri = rmbegin:(uri, len:(portstr))
            port = int -> portstr
        }

        ;parse the path
        var path = "/" ;path is default "/"
        if (len:(uri) != 0 && uri::0 == '/') {
            ;only if the uri looks like /a/b/c

            ;cut off the query
            ;   a/b/c?a
            if (searchfor:(uri, "?") == -1) path = clone:(uri)
            else {
                path = split:(uri, "?")::0
                uri = rmbegin:(uri, len:(path))
            }

        }
        ;;;;;;;;;;;;;;;

        ;parse the query (the hard part)
        var query = [::]
        if (len:(uri) != 0 && uri::0 == '?') {
            ;only if it looks some ?something
            uri = rmbegin:(uri, 1) ;remove the leading '?'

            ;now we end up with something like
            ;   a=b&c=d

            ;split by the &
            su := split:(uri, "&")

            each (su, k, v) {
                sc := split:(v, "=") ;split by the current =
                query[sc::0] = sc::1 ;set the key to the value
            }
        }
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        var urlp = make:(url) ;create the proto instance
        urlp::orig = _uri ;store the original uri
        urlp::protocol = protocol
        urlp::host = host
        urlp::port = port
        urlp::path = path
        urlp::query = query

        return urlp
    }
}